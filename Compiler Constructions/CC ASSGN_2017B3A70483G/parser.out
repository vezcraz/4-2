Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> evaluate
Rule 1     evaluate -> exp_assign
Rule 2     evaluate -> exp_move
Rule 3     evaluate -> exp_naming
Rule 4     evaluate -> exp_value
Rule 5     evaluate -> no_stop
Rule 6     evaluate -> empty
Rule 7     exp_assign -> assignment integer to integer comma integer stop
Rule 8     exp_move -> operation move stop
Rule 9     exp_naming -> var string is integer comma integer stop
Rule 10    exp_naming -> var operation is integer comma integer stop
Rule 11    exp_naming -> var move is integer comma integer stop
Rule 12    exp_naming -> var var is integer comma integer stop
Rule 13    exp_naming -> var is is integer comma integer stop
Rule 14    exp_naming -> var assignment is integer comma integer stop
Rule 15    exp_value -> value in integer comma integer stop
Rule 16    no_stop -> operation move
Rule 17    no_stop -> assignment integer to integer comma integer
Rule 18    no_stop -> var string is integer comma integer
Rule 19    no_stop -> value in integer comma integer
Rule 20    empty -> <empty>

Terminals, with rules where they appear

assignment           : 7 14 17
comma                : 7 9 10 11 12 13 14 15 17 18 19
error                : 
in                   : 15 19
integer              : 7 7 7 9 9 10 10 11 11 12 12 13 13 14 14 15 15 17 17 17 18 18 19 19
is                   : 9 10 11 12 13 13 14 18
move                 : 8 11 16
operation            : 8 10 16
stop                 : 7 8 9 10 11 12 13 14 15
string               : 9 18
to                   : 7 17
value                : 15 19
var                  : 9 10 11 12 12 13 14 18

Nonterminals, with rules where they appear

empty                : 6
evaluate             : 0
exp_assign           : 1
exp_move             : 2
exp_naming           : 3
exp_value            : 4
no_stop              : 5

Parsing method: LALR

state 0

    (0) S' -> . evaluate
    (1) evaluate -> . exp_assign
    (2) evaluate -> . exp_move
    (3) evaluate -> . exp_naming
    (4) evaluate -> . exp_value
    (5) evaluate -> . no_stop
    (6) evaluate -> . empty
    (7) exp_assign -> . assignment integer to integer comma integer stop
    (8) exp_move -> . operation move stop
    (9) exp_naming -> . var string is integer comma integer stop
    (10) exp_naming -> . var operation is integer comma integer stop
    (11) exp_naming -> . var move is integer comma integer stop
    (12) exp_naming -> . var var is integer comma integer stop
    (13) exp_naming -> . var is is integer comma integer stop
    (14) exp_naming -> . var assignment is integer comma integer stop
    (15) exp_value -> . value in integer comma integer stop
    (16) no_stop -> . operation move
    (17) no_stop -> . assignment integer to integer comma integer
    (18) no_stop -> . var string is integer comma integer
    (19) no_stop -> . value in integer comma integer
    (20) empty -> .

    assignment      shift and go to state 8
    operation       shift and go to state 9
    var             shift and go to state 10
    value           shift and go to state 11
    $end            reduce using rule 20 (empty -> .)

    evaluate                       shift and go to state 1
    exp_assign                     shift and go to state 2
    exp_move                       shift and go to state 3
    exp_naming                     shift and go to state 4
    exp_value                      shift and go to state 5
    no_stop                        shift and go to state 6
    empty                          shift and go to state 7

state 1

    (0) S' -> evaluate .



state 2

    (1) evaluate -> exp_assign .

    $end            reduce using rule 1 (evaluate -> exp_assign .)


state 3

    (2) evaluate -> exp_move .

    $end            reduce using rule 2 (evaluate -> exp_move .)


state 4

    (3) evaluate -> exp_naming .

    $end            reduce using rule 3 (evaluate -> exp_naming .)


state 5

    (4) evaluate -> exp_value .

    $end            reduce using rule 4 (evaluate -> exp_value .)


state 6

    (5) evaluate -> no_stop .

    $end            reduce using rule 5 (evaluate -> no_stop .)


state 7

    (6) evaluate -> empty .

    $end            reduce using rule 6 (evaluate -> empty .)


state 8

    (7) exp_assign -> assignment . integer to integer comma integer stop
    (17) no_stop -> assignment . integer to integer comma integer

    integer         shift and go to state 12


state 9

    (8) exp_move -> operation . move stop
    (16) no_stop -> operation . move

    move            shift and go to state 13


state 10

    (9) exp_naming -> var . string is integer comma integer stop
    (10) exp_naming -> var . operation is integer comma integer stop
    (11) exp_naming -> var . move is integer comma integer stop
    (12) exp_naming -> var . var is integer comma integer stop
    (13) exp_naming -> var . is is integer comma integer stop
    (14) exp_naming -> var . assignment is integer comma integer stop
    (18) no_stop -> var . string is integer comma integer

    string          shift and go to state 15
    operation       shift and go to state 17
    move            shift and go to state 18
    var             shift and go to state 14
    is              shift and go to state 16
    assignment      shift and go to state 19


state 11

    (15) exp_value -> value . in integer comma integer stop
    (19) no_stop -> value . in integer comma integer

    in              shift and go to state 20


state 12

    (7) exp_assign -> assignment integer . to integer comma integer stop
    (17) no_stop -> assignment integer . to integer comma integer

    to              shift and go to state 21


state 13

    (8) exp_move -> operation move . stop
    (16) no_stop -> operation move .

    stop            shift and go to state 22
    $end            reduce using rule 16 (no_stop -> operation move .)


state 14

    (12) exp_naming -> var var . is integer comma integer stop

    is              shift and go to state 23


state 15

    (9) exp_naming -> var string . is integer comma integer stop
    (18) no_stop -> var string . is integer comma integer

    is              shift and go to state 24


state 16

    (13) exp_naming -> var is . is integer comma integer stop

    is              shift and go to state 25


state 17

    (10) exp_naming -> var operation . is integer comma integer stop

    is              shift and go to state 26


state 18

    (11) exp_naming -> var move . is integer comma integer stop

    is              shift and go to state 27


state 19

    (14) exp_naming -> var assignment . is integer comma integer stop

    is              shift and go to state 28


state 20

    (15) exp_value -> value in . integer comma integer stop
    (19) no_stop -> value in . integer comma integer

    integer         shift and go to state 29


state 21

    (7) exp_assign -> assignment integer to . integer comma integer stop
    (17) no_stop -> assignment integer to . integer comma integer

    integer         shift and go to state 30


state 22

    (8) exp_move -> operation move stop .

    $end            reduce using rule 8 (exp_move -> operation move stop .)


state 23

    (12) exp_naming -> var var is . integer comma integer stop

    integer         shift and go to state 31


state 24

    (9) exp_naming -> var string is . integer comma integer stop
    (18) no_stop -> var string is . integer comma integer

    integer         shift and go to state 32


state 25

    (13) exp_naming -> var is is . integer comma integer stop

    integer         shift and go to state 33


state 26

    (10) exp_naming -> var operation is . integer comma integer stop

    integer         shift and go to state 34


state 27

    (11) exp_naming -> var move is . integer comma integer stop

    integer         shift and go to state 35


state 28

    (14) exp_naming -> var assignment is . integer comma integer stop

    integer         shift and go to state 36


state 29

    (15) exp_value -> value in integer . comma integer stop
    (19) no_stop -> value in integer . comma integer

    comma           shift and go to state 37


state 30

    (7) exp_assign -> assignment integer to integer . comma integer stop
    (17) no_stop -> assignment integer to integer . comma integer

    comma           shift and go to state 38


state 31

    (12) exp_naming -> var var is integer . comma integer stop

    comma           shift and go to state 39


state 32

    (9) exp_naming -> var string is integer . comma integer stop
    (18) no_stop -> var string is integer . comma integer

    comma           shift and go to state 40


state 33

    (13) exp_naming -> var is is integer . comma integer stop

    comma           shift and go to state 41


state 34

    (10) exp_naming -> var operation is integer . comma integer stop

    comma           shift and go to state 42


state 35

    (11) exp_naming -> var move is integer . comma integer stop

    comma           shift and go to state 43


state 36

    (14) exp_naming -> var assignment is integer . comma integer stop

    comma           shift and go to state 44


state 37

    (15) exp_value -> value in integer comma . integer stop
    (19) no_stop -> value in integer comma . integer

    integer         shift and go to state 45


state 38

    (7) exp_assign -> assignment integer to integer comma . integer stop
    (17) no_stop -> assignment integer to integer comma . integer

    integer         shift and go to state 46


state 39

    (12) exp_naming -> var var is integer comma . integer stop

    integer         shift and go to state 47


state 40

    (9) exp_naming -> var string is integer comma . integer stop
    (18) no_stop -> var string is integer comma . integer

    integer         shift and go to state 48


state 41

    (13) exp_naming -> var is is integer comma . integer stop

    integer         shift and go to state 49


state 42

    (10) exp_naming -> var operation is integer comma . integer stop

    integer         shift and go to state 50


state 43

    (11) exp_naming -> var move is integer comma . integer stop

    integer         shift and go to state 51


state 44

    (14) exp_naming -> var assignment is integer comma . integer stop

    integer         shift and go to state 52


state 45

    (15) exp_value -> value in integer comma integer . stop
    (19) no_stop -> value in integer comma integer .

    stop            shift and go to state 53
    $end            reduce using rule 19 (no_stop -> value in integer comma integer .)


state 46

    (7) exp_assign -> assignment integer to integer comma integer . stop
    (17) no_stop -> assignment integer to integer comma integer .

    stop            shift and go to state 54
    $end            reduce using rule 17 (no_stop -> assignment integer to integer comma integer .)


state 47

    (12) exp_naming -> var var is integer comma integer . stop

    stop            shift and go to state 55


state 48

    (9) exp_naming -> var string is integer comma integer . stop
    (18) no_stop -> var string is integer comma integer .

    stop            shift and go to state 56
    $end            reduce using rule 18 (no_stop -> var string is integer comma integer .)


state 49

    (13) exp_naming -> var is is integer comma integer . stop

    stop            shift and go to state 57


state 50

    (10) exp_naming -> var operation is integer comma integer . stop

    stop            shift and go to state 58


state 51

    (11) exp_naming -> var move is integer comma integer . stop

    stop            shift and go to state 59


state 52

    (14) exp_naming -> var assignment is integer comma integer . stop

    stop            shift and go to state 60


state 53

    (15) exp_value -> value in integer comma integer stop .

    $end            reduce using rule 15 (exp_value -> value in integer comma integer stop .)


state 54

    (7) exp_assign -> assignment integer to integer comma integer stop .

    $end            reduce using rule 7 (exp_assign -> assignment integer to integer comma integer stop .)


state 55

    (12) exp_naming -> var var is integer comma integer stop .

    $end            reduce using rule 12 (exp_naming -> var var is integer comma integer stop .)


state 56

    (9) exp_naming -> var string is integer comma integer stop .

    $end            reduce using rule 9 (exp_naming -> var string is integer comma integer stop .)


state 57

    (13) exp_naming -> var is is integer comma integer stop .

    $end            reduce using rule 13 (exp_naming -> var is is integer comma integer stop .)


state 58

    (10) exp_naming -> var operation is integer comma integer stop .

    $end            reduce using rule 10 (exp_naming -> var operation is integer comma integer stop .)


state 59

    (11) exp_naming -> var move is integer comma integer stop .

    $end            reduce using rule 11 (exp_naming -> var move is integer comma integer stop .)


state 60

    (14) exp_naming -> var assignment is integer comma integer stop .

    $end            reduce using rule 14 (exp_naming -> var assignment is integer comma integer stop .)

